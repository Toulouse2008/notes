Django
ODMs: object data mappers
ORMs: object relational mapping
Model-View-Router (MVR)

环境搭建
	1. 新建文件夹，并进入
	2. 安装虚拟环境
		$pip install virtualenv
		$vituralenv ENV
	3. 激活虚拟环境
		$source ENV/bin/activate
		$virtualenv --version
	4. 安装Django
		$pip install Django==1.11.8
	5. 确认安装成功
		$python
		>django.VERSION | django.get_version()

基本命令
	1. 新建一个项目
		$django-admin | django-admin.py startproject p_name
	2. 新建app
		$python manage.py | django-admin.py startapp app_name
	3. 创建数据库表，更改数据库，或字段
		$python manage.py makemigrations
		$python manage.py migrate
	4. 启动django服务器
		$python manage.py runserver [x.x.x.x][:port_number]
	5. 清空数据库  <===此命令会询问yes | no， yes-->数据清空，只留下空表
		$python manage.py flush

	6. 创建超级管理员
		$python manage.py createsuperuser 	<==??
		$python manage.py changepassword username 	<==??

	7. 导出数据，导入数据
		$python manage.py dumpdata appname>appname.json
		$python manage.py loaddata appname.json

	8. Djano项目环境终端
		$python manage.py shell

	9. 数据库命令行
		$python manage.py dbshell

	10. 终端命令列表
		$python manage.py

开始项目
1. 创建项目
	$django-admin startproject mysite
2. 创建app
	$cd mysite	<== not the inside mysite
	$python manage.py startapp learn
3. 添加新 app 到 mysite/mysite/settings.py 中
	INSTALLED_APPS = (
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',

	    'learn',
		)
4. 定义一个简单页面视图 learn/views.py
	from django.http import HttpResponse
	def index(request):
	    return HttpResponse("Welcome to Django")

5. 定义路由
	方案一:	mysite/urls.py
		from learn import views
		urlpatterns = [
			    url(r'^index', views.index, name='index'),
			    url(r'^admin/', admin.site.urls),
			]
		r'^index' === r'^$': 访问用的url不同，localhost:8000 | localhost:8000/index
	方案二:
		from django.conf.urls import url
		from django.contrib import admin
		from learn import views as learn_views

		urlpatterns = [
				url(r'^$', learn_views.index, name='index'),
		        url(r'^admin/', admin.site.urls),
			]

6.  添加模板
	- 创建模板 	learn/templates/home.html
		<!DOCTYPE html>
		<html>
		<head><title> calc </title></head>
		<body><a href="/add2/4/5/">calculate 4+5</a></body>
		</html>

	- 通知project如何找到templates， mysite/settings.py
		添加应用的名称: 'learn' 到 'DIRS':[]  ==> 'DIRS':['learn']

	- 定义路由
		url(r'^home', learn_views.home, name='home'),

7. Django模板中的循环，条件判断，常用的标签，过滤器的使用

	1. 列表，字典，类的实例的使用
		views:
		def home(request):
		    string = u"我在自强学堂学习Django，用它来建网站"
		    return render(request, 'home.html', {'string': string})
		home.html
			{{ string }}	==>我在自强学堂学习Django，用它来建网站

	2. 循环：迭代显示列表，字典等中的内容
		views.py
		def home(request):
		    TutorialList = ["HTML", "CSS", "jQuery", "Python", "Django"]
		    return render(request, 'home.html', {'TutorialList': TutorialList})
		home.html
			教程列表：
			{% for i in TutorialList %}
			{{ i }}
			{% endfor %}
				==>教程列表：HTML, CSS, jQuery, Python, Django

		一般的变量之类的用 {{ }}（变量），功能类的，比如循环，条件判断是用 {%  %}（标签)

		字典
		views.py
			def home(request):
		    info_dict = {'site': u'自强学堂', 'content': u'各种IT技术教程'}
		    return render(request, 'home.html', {'info_dict': info_dict})
	    home.html
	    	站点：{{ info_dict.site }} 内容：{{ info_dict.content }}

	    	OR
	    	{% for key, value in info_dict.items %}
		    {{ key }}: {{ value }}
			{% endfor %}
			其实就是遍历这样一个 List:  [('site', u'自强学堂'), ('content', u'各种IT技术教程')]

	3. 条件判断：判断是否显示该内容，比如判断是手机访问，还是电脑访问，给出不一样的代码。
		views.py
		def home(request):
		    List = map(str, range(100))# 一个长度为100的 List
		    return render(request, 'home.html', {'List': List})
		home.html
			{% for item in List %}
		    {{ item }},
			{% endfor %}

			OR
			{% for item in List %}
		    {{ item }}{% if not forloop.last %},{% endif %}
			{% endfor %}

	4. 标签：for，if 这样的功能都是标签。
		forloop.counter	索引从 1 开始算
		forloop.counter0	索引从 0 开始算
		forloop.revcounter	索引从最大长度到 1
		forloop.revcounter0	索引从最大长度到 0
		forloop.first	当遍历的元素为第一项时为真
		forloop.last	当遍历的元素为最后一项时为真
		forloop.parentloop	用在嵌套的 for 循环中，获取上一层 for 循环的 forloop

		for  empty

	5. 过滤器：管道符号后面的功能，比如{{ var|length }}，求变量长度的 length 就是一个过滤器。

	6. 模板中的逻辑操作
		==, !=, >=, <=, >, < 这些比较都可以在模板中使用，比如：
		{% if var >= 90 %}
		成绩优秀，自强学堂你没少去吧！学得不错
		{% elif var >= 80 %}
		成绩良好
		{% elif var >= 70 %}
		成绩一般
		{% elif var >= 60 %}
		需要努力
		{% else %}
		不及格啊，大哥！多去自强学堂学习啊！
		{% endif %}

		注意：比较符号前后必须有至少一个空格！

		and, or, not, in, not in 也可以在模板中使用

		{% if num <= 100 and num >= 0 %}
		num在0到100之间
		{% else %}
		数值不在范围之内！
		{% endif %}

		{% if 'ziqiangxuetang' in List %}
		自强学堂在名单中
		{% endif %}

	7. 模板中 获取当前网址，当前用户等
		Django 1.8 及以后 修改 settings.py （Django 1.11 中新建的项目已经默认加上了
		TEMPLATES = [
		    {
		        'BACKEND': 'django.template.backends.django.DjangoTemplates',
		        'DIRS': [],
		        'APP_DIRS': True,
		        'OPTIONS': {
		            'context_processors': [
		                ...
		                'django.template.context_processors.request',
		                ...
		            ],
		        },
		    },
		]

		获取当前用户: {{ request.user }}
			{% if request.user.is_authenticated %}
		    {{ request.user.username }}，您好！
			{% else %}
			    请登陆，这里放登陆链接
			{% endif %}

		获取当前网址：{{ request.path }}

		获取当前 GET 参数：{{ request.GET.urlencode }}

		合并到一起用的一个例子：<a href="{{ request.path }}?{{ request.GET.urlencode }}&delete=1">当前网址加参数 delete</a>

8. 模板
	1. 修改模板 app_name/models.py
		from django.db import models
		class Person(models.Model):
		    name = models.CharField(max_length=30)
		    age = models.IntegerField()

		name 和 age 等字段中不能有 __（双下划线，因为在Django QuerySet API中有特殊含义（用于关系，包含，不区分大小写，以什么开头或结尾，日期的大于小于，正则等）

		也不能有Python中的关键字，name 是合法的，student_name 也合法，但是student__name不合法，try, class, continue 也不合法，因为它是Python的关键字( import keyword; print(keyword.kwlist) 可以打出所有的关键字)

	2. 同步|应用 模板
		terminal进入 manage.py 所在的文件夹下
		# Django 1.7 及以上的版本需要用以下命令
		python manage.py makemigrations
		python manage.py migrat

	3. 使用 Django 提供的 QuerySet API
		$ python manage.py shell
		>>> from people.models import Person
		>>> Person.objects.create(name="WeizhongTu", age=24)
		<Person: Person object>
		>>> Person.objects.get(name="WeizhongTu")
		<Person: Person object>
		>>>

		新建一个对象的方法有以下几种：
			Person.objects.create(name=name,age=age)
			p = Person(name="WZ", age=23)
			p.save()
			p = Person(name="TWZ")
			p.age = 23
			p.save()
			Person.objects.get_or_create(name="WZT", age=23)
			这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为Person对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.

		获取对象有以下方法：
			Person.objects.all()
			Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存
			Person.objects.get(name=name)
			get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter
			Person.objects.filter(name="abc")  # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人
			Person.objects.filter(name__iexact="abc")  # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件
			Person.objects.filter(name__contains="abc")  # 名称中包含 "abc"的人
			Person.objects.filter(name__icontains="abc")  #名称中包含 "abc"，且abc不区分大小写
			Person.objects.filter(name__regex="^abc")  # 正则表达式查询
			Person.objects.filter(name__iregex="^abc")  # 正则表达式不区分大小写
			filter是找出满足条件的，当然也有排除符合某条件的
			Person.objects.exclude(name__contains="WZ")  # 排除包含 WZ 的Person对象
			Person.objects.filter(name__contains="abc").exclude(age=23)  # 找出名称含有abc, 但是排除年龄是23岁的

	4. QuerySet API

		from django.db import models
		class Blog(models.Model):
		    name = models.CharField(max_length=100)
		    tagline = models.TextField()

		    def __unicode__(self):  # __str__ on Python 3
		        return self.name

		class Author(models.Model):
		    name = models.CharField(max_length=50)
		    email = models.EmailField()

		    def __unicode__(self):  # __str__ on Python 3
		        return self.name

		class Entry(models.Model):
		    blog = models.ForeignKey(Blog)
		    headline = models.CharField(max_length=255)
		    body_text = models.TextField()
		    pub_date = models.DateField()
		    mod_date = models.DateField()
		    authors = models.ManyToManyField(Author)
		    n_comments = models.IntegerField()
		    n_pingbacks = models.IntegerField()
		    rating = models.IntegerField()

		    def __unicode__(self):  # __str__ on Python 3
		        return self.headline

		-QuerySet 创建对象的方法
			>>> from blog.models import Blog
			>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
			>>> b.save()
			总之，一共有四种方法
			# 方法 1
			Author.objects.create(name="WeizhongTu", email="tuweizhong@163.com")
			# 方法 2
			twz = Author(name="WeizhongTu", email="tuweizhong@163.com")
			twz.save()
			# 方法 3
			twz = Author()
			twz.name="WeizhongTu"
			twz.email="tuweizhong@163.com"
			twz.save()
			# 方法 4，首先尝试获取，不存在就创建，可以防止重复
			Author.objects.get_or_create(name="WeizhongTu", email="tuweizhong@163.com")
			# 返回值(object, True/False)

			前三种方法返回的都是对应的 object，最后一种方法返回的是一个元组，(object, True/False)，创建时返回 True, 已经存在时返回 False

		- 获取对象的方法
			Person.objects.all() # 查询所有
			Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存，不支持负索引，后面有相应解决办法，第7条
			Person.objects.get(name="WeizhongTu") # 名称为 WeizhongTu 的一条，多条会报错
			get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter
			Person.objects.filter(name="abc") # 等于Person.objects.filter(name__exact="abc") 名称严格等于 "abc" 的人
			Person.objects.filter(name__iexact="abc") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件
			Person.objects.filter(name__contains="abc") # 名称中包含 "abc"的人
			Person.objects.filter(name__icontains="abc") #名称中包含 "abc"，且abc不区分大小写
			Person.objects.filter(name__regex="^abc") # 正则表达式查询
			Person.objects.filter(name__iregex="^abc")# 正则表达式不区分大小写
			# filter是找出满足条件的，当然也有排除符合某条件的
			Person.objects.exclude(name__contains="WZ") # 排除包含 WZ 的Person对象
			Person.objects.filter(name__contains="abc").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的

		- 删除符合条件的结果
			Person.objects.filter(name__contains="abc").delete() # 删除 名称中包含 "abc"的人
			如果写成
			people = Person.objects.filter(name__contains="abc")
			people.delete()
			效果也是一样的，Django实际只执行一条 SQL 语句。

		- 更新某个内容
			批量更新，适用于 .all()  .filter()  .exclude() 等后面 (危险操作，正式场合操作务必谨慎)
				Person.objects.filter(name__contains="abc").update(name='xxx') # 名称中包含 "abc"的人 都改成 xxx
				Person.objects.all().delete() # 删除所有 Person 记录
			单个 object 更新，适合于 .get(), get_or_create(), update_or_create() 等得到的 obj，和新建很类似。
				twz = Author.objects.get(name="WeizhongTu")
				twz.name="WeizhongTu"
				twz.email="tuweizhong@163.com"
				twz.save()  # 最后不要忘了保存！！！

		- QuerySet 是可迭代的，比如
			es = Entry.objects.all()
			for e in es:
			    print(e.headline)

			Entry.objects.all() 或者 es 就是 QuerySet 是查询所有的 Entry 条目。
			注意事项：
			(1). 如果只是检查 Entry 中是否有对象，应该用 Entry.objects.all().exists()
			(2). QuerySet 支持切片 Entry.objects.all()[:10] 取出10条，可以节省内存
			(3). 用 len(es) 可以得到Entry的数量，但是推荐用 Entry.objects.count()来查询数量，后者用的是SQL：SELECT COUNT(*)
			(4). list(es) 可以强行将 QuerySet 变成 列表

		- QuerySet 是可以用pickle序列化到硬盘再读取出来的
			>>> import pickle
			>>> query = pickle.loads(s)     # Assuming 's' is the pickled string.
			>>> qs = MyModel.objects.all()
			>>> qs.query = query            # Restore the original 'query'.

		- QuerySet 查询结果排序
			Author.objects.all().order_by('name')
			Author.objects.all().order_by('-name') # 在 column name 前加一个负号，可以实现倒序

		- QuerySet 支持链式查询
			Author.objects.filter(name__contains="WeizhongTu").filter(email="tuweizhong@163.com")
			Author.objects.filter(name__contains="Wei").exclude(email="tuweizhong@163.com")
			# 找出名称含有abc, 但是排除年龄是23岁的
			Person.objects.filter(name__contains="abc").exclude(age=23)

		- QuerySet 不支持负索引
			Person.objects.all()[:10] 切片操作，前10条
			Person.objects.all()[-10:] 会报错！！！
			# 1. 使用 reverse() 解决
			Person.objects.all().reverse()[:2] # 最后两条
			Person.objects.all().reverse()[0] # 最后一条
			# 2. 使用 order_by，在栏目名（column name）前加一个负号
			Author.objects.order_by('-id')[:20] # id最大的20条

		- QuerySet 重复的问题，使用 .distinct() 去重
			qs1 = Pathway.objects.filter(label__name='x')
			qs2 = Pathway.objects.filter(reaction__name='A + B >> C')
			qs3 = Pathway.objects.filter(inputer__name='WeizhongTu')
			# 合并到一起
			qs = qs1 | qs2 | qs3
			这个时候就有可能出现重复的
			# 去重方法
			qs = qs.distinct()

		from blog.models import Article, Author, Tag
		Article.objects.all()
		Author.objects.all()
		Tag.objects.all()

		-查看 Django queryset 执行的 SQL
			print str(Author.objects.all().query)
			SELECT "blog_author"."id", "blog_author"."name", "blog_author"."qq", "blog_author"."addr", "blog_author"."email" FROM "blog_author"
			简化一下，就是：SELECT id, name, qq, addr, email FROM blog_author;

		- values_list 获取元组形式结果
			authors = Author.objects.values_list('name', 'qq')
			如果只需要 1 个字段，可以指定 flat=True
			In [9]: Author.objects.values_list('name', flat=True)
			Out[9]: <QuerySet [u'WeizhongTu', u'twz915', u'wangdachui', u'xiaoming']>

		- values 获取字典形式的结果
			比如我们要获取作者的 name 和 qq
			In [13]: Author.objects.values('name', 'qq')
			Out[13]: <QuerySet [{'qq': u'336643078', 'name': u'WeizhongTu'}, {'qq': u'915792575', 'name': u'twz915'}, {'qq': u'353506297', 'name': u'wangdachui'}, {'qq': u'004466315', 'name': u'xiaoming'}]>

9. 后台admin
	-创建 blog 的app
		$python manage.py startapp blog

	- 修改models.py
		from django.db import models
		class Article(models.Model):
		    title = models.CharField(u'标题', max_length=256)
		    content = models.TextField(u'内容')
		    pub_date = models.DateTimeField(u'发表时间', auto_now_add=True, editable = True)
		    update_time = models.DateTimeField(u'更新时间',auto_now=True, null=True)

	-注册后台admin服务 app_name/admin.py
		from .models import Article
		admin.site.register(Article)

	- blog加入到settings.py: add to the INSTALLED_APPS

	- 同步数据
		# 进入包含有 manage.py 的文件夹
		$python manage.py makemigrations
		$python manage.py migrate

	- 创建管理员
		$python manage.py createsuperuser
			==>ask for username, password, email
	- fireup
		$python manage.py runserver
	- 进入管理页面
		127.0.0.1:8000/admin
		admin:  password
