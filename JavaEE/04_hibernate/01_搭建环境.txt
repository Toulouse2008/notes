

流程
    -导包
    -创建数据库、准备表
    -书写元数据  对象与表的映射配置文件
    -书写主配置文件
    -书写测试代码，进行测试


Day 1
配置文件详解
    orm 元数据
        配置表和实体对象的关系
            <!-- 根元素  -->
            <hibernate-mapping package="package_name">
                <!-- 实体和表 -->
                <class name="Customer" table="table_name">
                    <!-- 主键配置 -->
                    <id name="customer_id" column="customer_id">
                        <!-- 生成策略 -->
                        <generator class="native"></generator>
                    </id>
                    <!-- property 元素: 除id之外的普通属性的映射
                        name: 填写属性名
                        column: 填写列名
                        type(optional):填写列(属性)的类型，hibernate会自动检测，建议别提
                            有三种填方法: java类型 | hibernate类型 | sql类型
                        not-null(可选): 配置该属性是否可以为空，默认false->可以为空
                        length(可选): 配置数据库表中该元素所在列的长度，默认使用数据库允许的
                            最大长度

                    -->
                    <property name="cust_name" column="cust_name">
                        <column name="cust_name" sql-type="varchar"></column>
                    </property>
                    <property name="cust_source" column="cust_source" type="java.lang.String"></property>
                    <property name="cust_industry" column="cust_industry" type="string"></property>
    hibernate 主配置
        数据库配置
        驱动
            <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
            数据库url
            <property name="hibernate.connection.url">jdbc:mysql://hibernate_32</property>
            连接用户名
            <property name="hibernate.connection.username">root</property>
            登录密码
            <property name="hibernate.connection.password">1234</property>
            数据库方言
            <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        可选配置
            在控制台显示生成的sql
            <property name="hibernate.show_sql">true</property>
            在控制台显示生成的sql并对语句进行格式化
            <property name="hibernate.format_sql">true</property>
            auto schema export 按照配置自动从实体中生成表结构，需要时自动建表
                hibernate.hbm2.ddl.auto create-drop: 自动创建表，每次运行框架创建表，
                                                    结束时删除表
                hibernate.hbm2ddl.auto create: 自动建表，每次框架运行，都会创建新表，
                                               之前的表被覆盖，数据丢失，只能用于测试环境
                hibernate.hbm2ddl.auto update: 自动生成表，但是如果表已经存在，则不生成了，
                                               如果有变动，自动更行，不会删除数据，可以生产环境
                hibernate.hbm2ddl.auto validate: 无自动，即不会自动生成表，但是，每次启动
                            都会校验表的配置是否正确，如果配置不对，则抛异常，表验证失败
            <property name="hibernate.hbm2ddl.auto">update</property>
            引入 orm 元数据--> 路径是 src 下的路径，该文件所在全路径删除src之前的目录
            <mapping resource="cn.itheima/domain/Customer.hbm.xml" />
API 详解
    Configuration: 配置加载类，用于加载主配置，orm元数据加载
        -创建: 调用空参构造 Configuration conf = new Configuration()
        -读取指定主配置文件: conf.configure(url | resource | configFile),
              常用空参方法，conf.configure(),默认加载 src 下的 hibernate.cfg.xml
        -读取orm元数据: conf.addResource(resourceName); conf.addClass(persistentClass)
        -创建 SessionFactory: SessionFactory sf = conf.buildSessionFactory()

    SessionFactory: 创建操作数据库核心对象Session的工厂类，即创建Session
        - 获得Session:
            sf.openSession();    -->打开一个新的Session
            sf.getCurrentSession(); --> 获得与当前线程绑定的Session
        注意
        1. SessionFactory 负责保存和使用所有配置信息，消耗内存资源非常大
        2. SessionFactory 线程安全的对象
        结论: 保证web项目中，只创建一个SessionFactory

    Session: 一次会话，hibernate中表示与数据库之间的一次连接

    Transaction

    Configuration conf = new Configuration().configure();
    SessionFactory sf = conf.buildSessionFactory();
    Session session = sf.openSession();
    Transaction tx = session.getTransaction();
    Transaction tx2 = session.beginTransaction()  <--建议使用
        Customer c = new Customer();
        c.setCustomer_name("处置博客")；
        session.save(c);
        // Customer customer = session.get(Customer.class, 1L);
        // System.out.println(customer);
        // session.update(customer);
        // session.delete(customer);
    tx2.commit();
    tx2.rollback();
    释放资源
    session.close();
    sf.close()
