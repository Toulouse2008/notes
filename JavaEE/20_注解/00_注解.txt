注解作用：每当你创建描述符性质的类或者接口时,一旦其中包含重复性的工作，就可以考虑使用注解来简化与自动化该过程。
Annotation是一种应用于类、方法、参数、变量、构造器及包声明中的特殊修饰符。
假如你想为应用设置很多的常量或参数，这种情况下，XML是一个很好的选择，因为它不会同特定的代码相连。
如果你想把某个方法声明为服务，那么使用Annotation会更好一些，因为这种情况下需要注解和方法紧密耦
合起来，开发人员也必须认识到这点。
目前，许多框架将XML和Annotation两种方式结合使用，平衡两者之间的利弊。

注解的属性
    注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参
    的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。
    @Target(ElementType.TYPE)
    @Retention(RetentionPolicy.RUNTIME)
    public @interface TestAnnotation {
        int id();
        String msg();
    }

    TestAnnotation 这个注解中拥有 id 和 msg 两个属性。在使用的时候，我们应该给它们进行赋值。
    赋值的方式是在注解的括号内以 value=”” 形式，多个属性之前用 ，隔开。
        @TestAnnotation(id=3,msg="hello annotation")
        public class Test { }
        注意:
            在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、注解及它们的数组
    属性可以有默认值，默认值需要用 default 关键值指定
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface TestAnnotation {
            public int id() default -1;
            public String msg() default "Hi";
        }
        使用
            @TestAnnotation()
            public class Test {}
            id 属性默认值为 -1，msg 属性默认值为 Hi, 无需要再在 @TestAnnotation 后面的括
            号里面进行赋值了
    如果一个注解内仅仅只有一个名字为 value 的属性时，应用这个注解时可以直接接属性值填写到括号内
        public @interface Check {
            String value();
        }
        Check 这个注解只有 value 这个属性。所以可以这样应用
                @Check("hi")
                int a;
            等效于
                @Check(value="hi")
                int a;
    最后，如果一个注解没有任何属性
            public @interface Perform {}
        在应用这个注解的时候，括号都可以省略
            @Perform
            public void testMethod(){}


Annotation的定义
    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.SOURCE)
    public @interface Override {
    }
四中元注解
    @Documented –注解是否将包含在JavaDoc中
    @Retention –什么时候使用该注解
    @Target –注解用于什么地方
    @Inherited – 是否允许子类继承该注解
    @Repeatable

    @Documented  一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。
    @Retention  定义该注解的生命周期。
        - RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。
            @Override, @SuppressWarnings都属于这类注解。
        - RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。
        - RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，
            所以在程序运行时可以获取到它们。
            如SpringMvc中的@Controller、@Autowired、@RequestMapping等
    @Target – 表示该注解用于什么地方。如果不明确指出，该注解可以放在任何地方。以下是一些可用的
        参数。需要说明的是：属性的注解是兼容的，如果你想给7个属性都添加注解，仅仅排除一个属性，
        那么你需要在定义target包含所有的属性。
        Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员
        （方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）
        @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
        ElementType.ANNOTATION_TYPE 可以给一个注解进行注解
        ElementType.CONSTRUCTOR 可以给构造方法进行注解
        ElementType.FIELD 可以给属性进行注解
        ElementType.LOCAL_VARIABLE 可以给局部变量进行注解
        ElementType.METHOD 可以给方法进行注解
        ElementType.PACKAGE 可以给一个包进行注解
        ElementType.PARAMETER 可以给一个方法内的参数进行注解
        ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举
    @Inherited – 定义该注释和子类的关系, 如果一个超类被 @Inherited 注解过的注解进行注解的话，
        那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解
    @Repeatable  是 Java 1.8 才加进来的

Annotations只支持基本类型、String及枚举类型。注释中所有的属性被定义成方法，并允许提供默认值。
    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.RUNTIME)
    public @interface Todo {
        public enum Priority {LOW, MEDIUM, HIGH}
        public enum Status {STARTED, NOT_STARTED}
        String author() default "Yash";
        Priority priority() default Priority.LOW;
        Status status() default Status.NOT_STARTED;
    }
下面的例子演示了如何使用上面的注解。
    @Todo(priority = Todo.Priority.MEDIUM, author = "Yashwant", status = Todo.Status.STARTED)
    public void incompleteMethod1() {
        //Some business logic is written
        //But it’s not complete yet
    }
如果注解中只有一个属性，可以直接命名为“value”，使用时无需再标明属性名。
    @interface Author{
    String value();
    }
    @Author("Yashwant")
    public void someMethod() {
    }
    //定义注解
    @Target(ElementType.FIELD)
    @Retention(RetentionPolicy.RUNTIME)
    @interface IntegerVaule{
        int value() default 0;
        String name() default "";
    }
    //使用注解
    public class QuicklyWay {
        //当只想给value赋值时,可以使用以下快捷方式
        @IntegerVaule(20)
        public int age;
        //当name也需要赋值时必须采用key=value的方式赋值
        @IntegerVaule(value = 10000,name = "MONEY")
        public int money;
    }


自定义注解
　　 使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程
    序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其
    中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型
    (返回值类型只能是基本类型、Class、String、enum). 可以通过default来声明参数的默认值。

　　定义注解格式：
　　   public @interface 注解名 {定义体}

　　注解参数的可支持数据类型：
　　　　1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)
　　　　2.String类型
　　　　3.Class类型
　　　　4.enum类型
　　　　5.Annotation类型
　　　　6.以上所有类型的数组

　　Annotation类型里面的参数该怎么设定:
    　　第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设
            为defaul默认类型；　 　
    　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基
            本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.
            例如,String value();这里的参数成员就为String;　　
    　　第三,如果只有一个参数成员,最好把参数名称设为"value",后加小括号.例:下面的例子FruitName
            注解就只有一个参数成员。

简单的自定义注解和使用注解实例：
示例1：
    /***
     *主键注解接口
     */
    @Target(value = {ElementType.FIELD})
    @Retention(value = RetentionPolicy.RUNTIME)
    public @interface Id {
    }

示例2
    /**属性不需要被持久化注解**/
    @Target(value = {ElementType.FIELD})
    @Retention(value = RetentionPolicy.RUNTIME)
    @Documented
    public @interface Transient {
    }

注解元素的默认值：
　　注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解
    元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法. 空字符串或者负数，
    表示某个元素不存在.

注解处理器类库(java.lang.reflect.AnnotatedElement)
    该接口是所有Annotation类型的父接口。除此之外，Java在java.lang.reflect 包下新增了
    AnnotatedElement接口，该接口代表程序中可以接受注解的程序元素，该接口主要有如下几个实现类：
        Class：类定义
        Constructor：构造器定义
        Field：累的成员变量定义
        Method：类的方法定义
        Package：类的包定义
    java.lang.reflect 包下主要包含一些实现反射功能的工具类
    AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序
    通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访
    问Annotation信息：

　　方法1：<T extends Annotation> T getAnnotation(Class<T> annotationClass): 返回改
        程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。
　　方法2：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。
　　方法3：boolean is AnnotationPresent(Class<?extends Annotation> annotationClass):
        判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.
　　方法4：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此
        接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回
        长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数
        组产生任何影响。


Java内置注解与其它元注解: Java提供的内置注解，主要有3个
    @Override：用于标明此方法覆盖了父类的方法，源码如下
        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface Override {
        }
    @Deprecated：用于标明已经过时的方法或类，源码如下，关于@Documented稍后分析
        @Documented
        @Retention(RetentionPolicy.RUNTIME)
        @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
        public @interface Deprecated {
        }
    @SuppressWarnnings:用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告，其实现源码如下
        @Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})
        @Retention(RetentionPolicy.SOURCE)
        public @interface SuppressWarnings {
            String[] value();
        }
        其内部有一个String数组，主要接收值如下
            deprecation：使用了不赞成使用的类或方法时的警告；
            unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型;
            fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;
            path：在类路径、源文件路径等中有不存在的路径时的警告;
            serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;
            finally：任何 finally 子句不能正常完成时的警告;
            all：关于以上所有情况的警告。
    这个三个注解比较简单，看个简单案例即可
        //注明该类已过时，不建议使用
        @Deprecated
        class A{
            public void A(){ }
            //注明该方法已过时，不建议使用
            @Deprecated()
            public void B(){ }
        }

        class B extends A{
            @Override //标明覆盖父类A的A方法
            public void A() {
                super.A();
            }
            //去掉检测警告
            @SuppressWarnings({"uncheck","deprecation"})
            public void C(){ }
            //去掉检测警告
            @SuppressWarnings("uncheck")
            public void D(){ }
        }

    @SafeVarargs    参数安全类型注解。它的目的是提醒开发者不要用参数做一些不安全的操作,
        它的存在会阻止编译器产生 unchecked 这样的警告
    @FunctionalInterface    函数式接口注解，这个是 Java 1.8 版本引入的新特性
        函数式接口 (Functional Interface) 就是一个具有一个方法的普通接口

Java 8中注解增强   元注解@Repeatable
    Java8前无法这样使用
        @FilterPath("/web/update")
        @FilterPath("/web/add")
        public class A {}
    必须这样定义
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface FilterPath {
            String [] value();
        }
        //使用
        @FilterPath({"/update","/add"})
        public class A { }

    使用Java8新增@Repeatable原注解
        @Target({ElementType.TYPE,ElementType.FIELD,ElementType.METHOD})
        @Retention(RetentionPolicy.RUNTIME)
        @Repeatable(FilterPaths.class)//参数指明接收的注解class
        public @interface FilterPath {
            String  value();
        }
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        @interface FilterPaths {
            FilterPath[] value();
        }
        //使用案例
        @FilterPath("/web/update")
        @FilterPath("/web/add")
        @FilterPath("/web/delete")
        class AA{ }

        案例二
            @interface Persons {
            Person[]  value();
            }
            @Repeatable(Persons.class)
            @interface Person{
            String role default "";
            }
            @Person(role="artist")
            @Person(role="coder")
            @Person(role="PM")
            public class SuperMan{
            }

新增的两种ElementType
TYPE_PARAMETER 和 TYPE_USE ，在Java8前注解只能标注在一个声明(如字段、类、方法)上，Java8后，
新增的TYPE_PARAMETER可以用于标注类型参数，而TYPE_USE则可以用于标注任意类型(不包括class)
//TYPE_PARAMETER 标注在类型参数上
class D<@Parameter T> { }

//TYPE_USE则可以用于标注任意类型(不包括class)
//用于父类或者接口
class Image implements @Rectangular Shape { }

//用于构造函数
new @Path String("/usr/bin")

//用于强制转换和instanceof检查,注意这些注解中用于外部工具，它们不会对类型转换或者instanceof的检查行为带来任何影响。
String path=(@Path String)input;
if(input instanceof @Path String)

//用于指定异常
public Person read() throws @Localized IOException.

//用于通配符绑定
List<@ReadOnly ? extends Person>
List<? extends @ReadOnly Person>

@NotNull String.class //非法，不能标注class
import java.lang.@NotNull String //非法，不能标注import
