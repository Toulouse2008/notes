1.全局字符串池（string pool也有叫做string literal pool）
    全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将
    该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的
    实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。 在HotSpot VM里实现的string
    pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双
    引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个
    StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM
    的实例只有一份，被所有的类共享。

2.class文件常量池（class constant pool）
    我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常
    量池(constant pool table)，用于存放编译器生成的各种字面量(Literal)和符号引用(Symbolic
    References)。 字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。 符号
    引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标
    即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位
    到目标的句柄）。一般包括下面三类常量：
        类和接口的全限定名
        字段的名称和描述符
        方法的名称和描述符
    常量池的每一项常量都是一个表，一共有如下表所示的11种各不相同的表结构数据，这每个表开始的第
    一位都是一个字节的标志位（取值1-12），代表当前这个常量属于哪种常量类型。

    每种不同类型的常量类型具有不同的结构，具体的结构本文就先不叙述了，本文着重区分这三个常量池的
    概念（读者若想深入了解每种常量类型的数据结构可以查看《深入理解java虚拟机》第六章的内容）。

3.运行时常量池（runtime constant pool）
    当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又
    是什么时候产生的呢？

    jvm在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。而
    当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量
    池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的
    并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直
    接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量
    池所引用的字符串与全局字符串池中所引用的是一致的。

    举个实例来说明一下:
    String str1 = "abc"; String str2 = new String("def"); String str3 = "abc";
    String str4 = str2.intern(); String str5 = "def";
     System.out.println(str1 == str3);//true
     System.out.println(str2 == str4);//false
     System.out.println(str4 == str5);//true
    上面程序的首先经过编译之后，在该类的class常量池中存放一些符号引用，然后类加载之后，将class
    常量池中存放的符号引用转存到运行时常量池中，然后经过验证，准备阶段之后，在堆中生成驻留字符串
    的实例对象（也就是上例中str1所指向的”abc”实例对象），然后将这个对象的引用存到全局String
    Pool中，也就是StringTable中，最后在解析阶段，要把运行时常量池中的符号引用替换成直接引用，
    那么就直接查询StringTable，保证StringTable里的引用值与运行时常量池中的引用值一致，大概
    整个过程就是这样了。

    回到上面的那个程序，现在就很容易解释整个程序的内存分配过程了，首先，在堆中会有一个”abc”实例，
    全局StringTable中存放着”abc”的一个引用值，然后在运行第二句的时候会生成两个实例，一个是
    ”def”的实例对象，并且StringTable中存储一个”def”的引用值，还有一个是new出来的一个”def”
    的实例对象，与上面那个是不同的实例，当在解析str3的时候查找StringTable，里面有”abc”的全
    局驻留字符串引用，所以str3的引用地址与之前的那个已存在的相同，str4是在运行的时候调用
    intern()函数，返回StringTable中”def”的引用值，如果没有就将str2的引用值添加进去，
    在这里，StringTable中已经有了”def”的引用值了，所以返回上面在new str2的时候添加到
    StringTable中的 “def”引用值，最后str5在解析的时候就也是指向存在于StringTable中的”def”
    的引用值，那么这样一分析之后，下面三个打印的值就容易理解了。

    总结
    1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。
    2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。
    3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。





方法区存着类的信息，常量和静态变量，即类被编译后的数据。这个说法其实是没问题的，只是太笼统了。
更加详细一点的说法是方法区里存放着类的版本，字段，方法，接口和常量池。常量池里存储着字面量和符号引用。
符号引用包括：1.类的全限定名，2.字段名和属性，3.方法名和属性。
class文件信息包括：魔数，版本号，常量池，类，父类和接口数组，字段，方法等信息

静态常量池和动态常量池的关系以及区别
    静态常量池存储的是当class文件被java虚拟机加载进来后存放在方法区的一些字面量和符号引用，字
    面量包括字符串，基本类型的常量，符号引用其实引用的就是常量池里面的字符串，但符号引用不是直
    接存储字符串，而是存储字符串在常量池里的索引。

    动态常量池是当class文件被加载完成后，java虚拟机会将静态常量池里的内容转移到动态常量池里，
    在静态常量池的符号引用有一部分是会被转变为直接引用的，比如说类的静态方法或私有方法，实例构
    造方法，父类方法，这是因为这些方法不能被重写其他版本，所以能在加载的时候就可以将符号引用转
    变为直接引用，而其他的一些方法是在这个方法被第一次调用的时候才会将符号引用转变为直接引用的。

总结：
    方法区里存储着class文件的信息和动态常量池,class文件的信息包括类信息和静态常量池。可以将类
    的信息是对class文件内容的一个框架，里面具体的内容通过常量池来存储。

    动态常量池里的内容除了是静态常量池里的内容外，还将静态常量池里的符号引用转变为直接引用，而且
    动态常量池里的内容是能动态添加的。例如调用String的intern方法就能将string的值添加到String
    常量池中，这里String常量池是包含在动态常量池里的，但在jdk1.8后，将String常量池放到了堆中。


==常量池水比较深！！！==网上目前存在各种说法，还是以书上为准呗。

常量池大体可以分为两种：静态常量池和运行时常量池。
静态常量池:
    也就是*.class文件中的常量池，主要存放编译期生成的各种字面量和符号引用。
    字面量（Literal）相当于java层面的常量概念，比如字符串和final声明的常量等。符号引用
    （Symbolic References）可以理解为编译原理方面的，包括：类和接口的全限定名、字段名
    和描述符、方法名称和描述符。
运行时常量池:
    存在于方法区，个人理解就是在类被加载之后，原来的静态常量池存放到方法区的运行时常量池。除此
    之外，运行时常量池一个重要特征就是动态性。


常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。 在很多面试题中关于常量
池的花样百出
    1. 关于String的equal和==比较的
         String s1="test";
         String s2="test";
         String s3=new String("test");
         System.out.println(s1==s2);
         System.out.println(s1==s3);
         System.out.println(s1.equals(s3));
         以上结果的输出依次为：true,false,true 首先需要明确一点：直接由==双引号==声明的
         String对象是字符串常量，编译期间直接放到常量池，其它方式创建的都是字符串对象！时刻记
         住这点，基本上就能解决大部分问题。另外一点就是java中直接使用==操作符，比较的是两个字
         符串的引用地址，并不是比较内容，equals比较的是内容。s1的引用地址在方法区里，s3是一个
         对象，其地址在堆里，所以不相等。其它的情形，比如使用+连接的情况只需要记住只要有new就
         有新对象就可。
         注意一个特例：
         private static final String s1="ab";
         private static final String s2="cd";
         private static final String s3;
         private static final String s4;
         static{
             s3="ab";
             s4="cd";
         }

         public static void main(String[] args) {
             String s5=s1+s2;
             String s6=s3+s4;
             String s="abcd";
             System.out.println(s==s5);//true
             System.out.println(s==s6);//false

         }
         这里涉及到类的加载初始化等，所以在这里不再分析，待到学习到class加载章节再分析。
    2. 关于String s = new String("test"); 创建了几个对象？
        分析：考虑到整个类的加载过程，“test”本身在编译期就被放到了常量池里，在执行new String()
        时把常量池里的“test”复制到堆中，并把这个对象的引用赋值给s,因此有两个：一个是new
        String(),另一个是匿名的“test”

    3. 关于java的8中基本类型
        java中基本类型的包装类的大部分都实现了常量池技术,即除了两种浮点数类型外的其余六种：
        Character,Byte,Short,Integer,Long,Boolean.但是需要注意，除了Boolean之外的五种
        封装类只有在[-128,127]范围内才在常量池内有对象。这也就出现了这样的面试题：
         Integer a=1;
         Integer b=1;
         Integer c=129;
         Integer d=129;
         System.out.println(a==b);//true
         System.out.println(c==d);//false

    4. String.intern()
        字符串常量存放在常量池，直接由双引号声明的String对象是字符串常量，编译期间直接放到常量池
        其它方式创建的String对象可以通过String.intern()方法放入常量池，但是注意：==JDK1.7
        之后,intern()不会再复制实例，只是在常量池中记录首次出现的实例的引用==，以下如无特殊说明，
        都是在jdk1.7+
        由new String()方式创建的是String对象，不是常量！！！这就是String.equal()和==的区别
        String.intern()首先会在常量池中查找是否存在相同的字符串常量，若有则返回其引用；如果
        没有则在常量池中记录首次出现的实例的引用。
        String str1=new StringBuilder("计算机").append("软件").toString();
        System.out.println(str1.intern()==str1);

        String str2=new StringBuilder("ja").append("va").toString();
        System.out.println(str2.intern()==str2);
        结果输出:true,false
        str1是一个String对象，“计算机软件”首次出现，常量池中没有该引用，所以返回true
        str2这里有很多疑问，如果将java改成java1之后得到的结果就是true.书上的解释是“java”
        这个字符串在执行StringBuilder之前就已经出现过，在常量池中有了它的引用。但是在程序代
        码里我们并没有定义啊，很多人说是jvm启动时就存在了，但是没道理啊，不能因为是java语言就
        得有个java字符串啊。目前网上我认为比较合理的解释是：
        jvm从启动，到执行main里面的第一条代码，要经历很多的，比如加载rt.jar里面所有的Class，
        加载一个class肯定要执行static{}中内容，况且rt.jar中的jdk的类里面有很多
        xxx.startWith("java")或者其他用到"java"的代码，jvm启动的时候直接按照常量加载进来。
        [来源于知乎(https://www.zhihu.com/question/32672669/answer/87514393)
        我个人猜想是不是jvm默认存在的，就和其它的基本类型的封装类Integer，Long默认的有
        [-128,127]那样
