01 类加载
类的加载、连接和初始化
    加载: 把类 .class 文件读入内存
    连接:
        -验证: 确保读入内存的 .class 文件格式正确
            类文件的结构检查
            语义检查
            字节码验证
            二进制兼容性验证
        -准备: 为类的静态变量分配内存，并将其初始化为默认值
        -解析: 把类中的符号引用转换为直接引用
    初始化: 为类的静态变量赋予正确的初始值，静态代码块执行

类的使用方式: 主动使用和被动使用
    主动:
        创建类的实例
        访问类或者接口的静态变量或者对该静态变量赋值
        调用静态方法
        反射
        初始化一个类的子类
        Java虚拟机启动时被标记为启动类的类(Java Test)
    被动使用: 除了以上6种情况，其他的都是被动使用，都不会导致类的初始化

类加载的最终产品是: 位于堆区中的Class对象，该对象封装了类在方法区内的数据结构，并且向Java程序员
    提供了访问方法区内的数据结构的接口-->反射

类加载器
    JVM自带的加载器
        根类加载器-->Bootstrap class Loader (C++写的，没有开源，没法访问)
                clazz.getClassLoader() --> 返回null，如果类有根类加载器加载
        扩展类加载器-->Extension class Loader (Java写的)
        系统/应用类加载器-->System/Application class loader (Java写的)
    自定义类加载器:
        java.lang.ClassLoader的子类: 定义该类的子类
        用户可以定制类的加载方式
    JVM允许预先加载某个预料中将要使用的类，如果预加载是遇到了 .class文件缺失或者存在错误，JVM
    并不报错，只有当第一次使用该类的时候，才会抛出LinkageError. 例如，俩个类分别用高低两个版本
    的jdk编译，用低版本运行时，可能会抛出此错误

    
