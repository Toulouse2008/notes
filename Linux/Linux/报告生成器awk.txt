报告生成器awk

将文本中的信息以定义好的格式显示出来

Aho, Weinberger and Kernighan

nawk -->solaris
gawk -->linux

切割每一行，默认以空格为分隔符，$1 $2 $3 ...., 整行用 $0

awk [options] 'script' file1 file2 ... 
awk [options] 'pattern { action }' file1 file2 ...
	print, printf

$awk '{print $1,$3}' test.txt  <==默认分隔符为空格
$awk 'BEGIN{OFS="#"} {print $1,$3}' 1.txt  <==指定输出分隔符为#
$awk 'BEGIN{OFS="#"} {print $1,"hello",$3}' 1.txt <==输出可插入内容，""
$awk 'BEGIN {print "line1\nline2\nline3"}'  <==分三行显示内容
	BEGIN -->不读取文件
$awk -F: '{print $1,$3}' /etc/passwd   <==显示用户username和id号

	-F:输入分隔符
	FS=":"

awk变量
	1. 内置变量
		FS: field separator,默认空白字符,读入文本所使用的字段分隔符
		RS: record separator, 默认是换行符，读入时的行分隔符

		OFS: Output field separator，输出时使用的字段分隔符
		ORS: Output raw separator, 

		awk -F:		OFS="#"		FS=":"

	2. 内置变量的数据变量
		NR:The number of input records,awk命令所处理的记录数，多个文件的行统一计数
		FNR:记录正在处理的行在当前文件中的行数

		NF:The number of fields, 当前处理记录的fields总数数
		
		ARGV:数组，保存命令行本身这个字符串，如awk '{print $0}'中，AGV[0]保存awk， 
			AGV[1]保存a.txt ARG[2]-->b.txt
		ARGC:保存awk命令的参数的个数
		FILENAME:awk命令所处理的文件的名称
		ENVION:当前shell环境变量信息以及其值的关联数组

	3. 用户自定义变量
		gawk使用字母、下划线和数字，但不能数字开头，变量名区分大小写
		1. 在命令行中定义变量，并使用
			$awk -v test="hello awk" 'BEGIN {print test}'
		2. 在awk脚本中定义变量
			$awk 'BEGIN {test="hello awk"; print test}'

printf:
	格式: printf format, item1, item2,...
	要点：
		1.需要指定format
		2.format用于指定后面每个item的输出格式
		3.printf不会自动打印换行符

	format: 以%开始，后跟一个字符
		%c:		显示字符
		%d,%i:	十进制整数
		%e,%E:	科学计数法显示
		%f:		显示浮点数
		%g, %G:	科学计数法的格式显示
		%s:		显示字符串
		%u:		显示无符号整数
		%%:		显示%

	修饰符：
		N:	显示宽度
		-:	左对齐
		+:	显示数值的符号

	awk -F: '{printf "%-15s %i\n", $1, $3}' /etc/passwd

操作符
	1.算术操作符
		+，-，*, /, %， ** 

	2.字符串操作符
		只有一个，而且不用写出来，用于实现字符串连接

	3. 赋值操作符
		=， +=, /=, --, ++

		注意：如果某模式为=， 此时使用 /=/ 可能会有错误，应该使用 /[=]/

	4.布尔值
		任意非0值或非空字符串都是真，反之为假

	5. 比较操作符
		<, >, <=, >=, ==, !=
		x~y: True if the string x mathes the regexp denoted by y
		x!~y True if the string x does not matches the regexp denoted by y
		subscript in array: True if the array array has an element with the subscript subscript

	6. 表达式间的逻辑关系
		&&	|| 	!

	7.条件表达式
		selector?if-true-exp:if-false_exp

	8. 函数调用
		function_name(para1, para2)

awk模式
	awk 'program' file1, file2, ...
	program: pattern {action} pattern {action} ...
	1. 常见模式
		Regexp:正则表达式，格式为/regular expression/
			awk -F: '/^r/ {print $1}' /etc/passwd   
		Expression:表达式,其值非0或非空字符时满足条件，如$1 ~ /foo/, $1=="mage"
			awk -F: '$3>=500 {print $1, $3}' /etc/passwd
			awk -F: '$7 ~ "bash$" {print $1, $7}' /etc/passwd
			awk -F: '$7 !~ "bash$" {print $1, $7}' /etc/passwd
		Ranges:指定的匹配范围，格式part1,part2
			awk -F: '/^r/,/^m/ {print $1, $7}' /etc/passwd
		BEGIN/END:特殊模式，仅在awk命令执行前运行一次或结束前运行一次
		Empty(空模式): 匹配任意输入行

	2. 常见的action
		Expressions:
		Control statements:
		Compound statements:
		Input statements:
		Output statements:


$awk 'BEGIN{OFS="#"} {print $1,$3}' 1.txt