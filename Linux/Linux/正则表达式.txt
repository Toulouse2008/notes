正则表达式

字符转义
	\r,\n		代表回车, 换行符
	\t				制表符
	\\			代表 "\" 本身
	\^			匹配 ^ 符号本身
	\$			匹配 $ 符号本身
	\.			匹配点（.）本身

元字符
	匹配字符
	.	匹配除换行符以外的任意字符
	\w	匹配字母或数字或下划线或汉字
	\s	匹配任意的空白符
	\d	匹配数字
	\b	匹配单词的开始或结束
	^	匹配字符串的开始
	$	匹配字符串的结束
	[a-zA-Z0-9]  匹配任意一个字母数字

	说明：\b
		匹配一个单词边界，也就是单词和空格之间的位置，不匹配任何字符
		表达式 ".\b." 在匹配 "@@@abc" 时，匹配结果是：成功；匹配到的内容是："@a"；匹配到的位置是：开始于2，结束于4。
	    进一步说明："\b" 与 "^" 和 "$" 类似，本身不匹配任何字符，但是它要求它在匹配结果中所处位置的左右两边，其中一边是 "\w" 范围，另一边是 非"\w" 的范围。
	    表达式 "\bend\b" 在匹配 "weekend,endfor,end" 时，匹配结果是：成功；匹配到的内容是："end"；匹配到的位置是：开始于15，结束于18。

	反匹配
	\W	匹配任意不是字母，数字，下划线，汉字的字符
	\S	匹配任意不是空白符的字符
	\D	匹配任意非数字的字符
	\B	匹配不是单词开头或结束的位置
	[^x]	匹配除了x以外的任意字符
	[^aeiou]	匹配除了aeiou这几个字母以外的任意字符

重复方式
	*	重复零次或更多次
	+	重复一次或更多次
	?	重复零次或一次
	{n}	重复n次
	{n,}	重复n次或更多次
	{n,m}	重复n到m次

费贪婪模式
	*?	重复任意次，但尽可能少重复
	+?	重复1次或更多次，但尽可能少重复
	??	重复0次或1次，但尽可能少重复
	{n,m}?	重复n到m次，但尽可能少重复
	{n,}?	重复n次以上，但尽可能少重复

其他符号
	| 	左右两边表达式之间 "或" 关系，匹配左边或者右边
	()	(1). 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰
		(2). 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到

"￥(\d+\.?\d*)" 在匹配 "＄10.9,￥20.5" 时，匹配的结果是：成功；匹配到的内容是："￥20.5"；匹配到的位置是：开始于6，结束于10。单独获取括号范围匹配到的内容是："20.5"

文本 "dxxxdxxxd"
贪婪模式匹配
(d)(\w+)	"\w+" 将匹配第一个 "d" 之后的所有字符 "xxxdxxxd"
(d)(\w+)(d)	"\w+" 将匹配第一个 "d" 和最后一个 "d" 之间的所有字符. 虽然 "\w+" 也能够匹配上最后一个"d"，但是为了使整个表达式匹配成功，"\w+" 可以 "让出"它本来能够 匹配的最后一个 "d"

非贪婪模式
(d)(\w+?)	"\w+?" 将尽可能少的匹配第一个 "d" 之后的字符，结果是："\w+?" 只匹配了一个 "x"
(d)(\w+?)(d)	为了让整个表达式匹配成功，"\w+?" 不得不匹配 "xxx" 才可以让后边的 "d" 匹配，从而使整个表达式匹配成功。因此，结果是："\w+?" 匹配 "xxx"


反向引用 \1, \2...
    表达式在匹配时，表达式引擎会将小括号 "( )" 包含的表达式所匹配到的字符串记录下来。在获取匹配结果的时候，小括号包含的表达式所匹配到的字符串可以单独获取。这一点，在前面的举例中，已经多次展示了。在实际应用场合中，当用某种边界来查找，而所要获取的内容又不包含边界时，必须使用小括号来指定所要的范围。比如前面的 "<td>(.*?)</td>"。

    其实，"小括号包含的表达式所匹配到的字符串" 不仅是在匹配结束后才可以使用，在匹配过程中也可以使用。表达式后边的部分，可以引用前面 "括号内的子匹配已经匹配到的字符串"。引用方法是 "\" 加上一个数字。"\1" 引用第1对括号内匹配到的字符串，"\2" 引用第2对括号内匹配到的字符串……以此类推，如果一对括号内包含另一对括号，则外层的括号先排序号。换句话说，哪一对的左括号 "(" 在前，那这一对就先排序号。