数据类型: int, float, char, etc.
抽象数据类型: 数据模型 + 定义在该模型上的一组操作, Vector, List
数据结构: 基于特定语言，实现 ADT 的一整套算法

栈
    进制转换
    括号匹配
    中缀表达式
    逆波兰表达式
    
队列

线性表
    基本操作:
        1. initiate(L): 初始化
        2. length(L):
        3. getElement(L, i):
        4. next(L, elm):
        5. locate(L, x):
        6. insert(L, i, b):
        8. delete(L, i):
            if(i < 0 || i > L.length) Error
            for(j = i + 1; j < l.length; j++)
                L[j] = L[j - 1]
            L.length -= 1
        9. isEmpty(L):
        10. clear(L):
        例题: 合并两个非递减链表
    线性表的实现
        顺序存储结构  数组
            优点: 首地址确定，值可以随机存取
            缺点: 需要事先设定长度，一旦设定，不能更改，插入、删除效率低
        连式存储结构  线性链表
            优点: 不需要事先确定长度，可以随意改变长度，删除和插入效率高
            缺点: 查找效率低

    线性表的两个实例    栈和队列    各有两种实现方式: 数组 和 链表

串
    由零个或者多个字符组成的序列
    基本操作
        assign:
        equal(s1,s2):
        length(s1):
        concat(s1,s2)
        substr(s, start, len):
        index(s, key):
        replace(s, t, v):
        insert(s, pos, t):
        delete(s, pos, len):

    稀疏矩阵的存储: 数组 和 十字链表

树
    概念
        结点的度: 结点拥有的子树数
        树的度: 树内各个结点的度的最大值
        深度: 树中结点的最大层次，根为第一层
        满二叉树: 深度为 k, 结点数 2^k - 1 个结点
        完全二叉树: 结点编号从上到下，从左到右。深度为 k,有 n 个结点的二叉树, 当且仅当每个结
        点都与深度为 k 的满二叉树中编号从 1 到 n 的结点一一对应时。

    实现: 数组 和 链表

    二叉树的遍历: 先(根)序遍历 中(根)序遍历 后(根)序遍历

    应用
        哈夫曼树: 又称最优二叉树，是一类带权路径长度最短的树

图
    表示: 数组 和 邻接表    十字链表
    遍历:
        深度优先    广度优先

    最小生成树
    最短路径


查找
    有序表查找: 二分法(数组)  搜索二叉树
    动态查找表
        二叉排序树 和 平衡二叉树
        二叉搜索树: 空树，或者左子树为空或者元素均小于根，右子树为空或者均大于根，他的左右子树
            也是二叉搜索树
        平衡二叉树: AVL树，是空树，或者他的左右子树均是平衡二叉树，且左右子树的深度之差不超过 1

    B-树: 平衡的多路查找树
    B+树: 叶子节点包含关键字信息，且按关键字排序

    哈希表: 根据设定的 hash 函数和处理冲突的方法将一组关键字映像到一个有限的连续的地址区间，
        并以关键字在地址集中的'象'作为记录在表中的存储位置
        处理 collision 的方法

排序
    插入排序
    希尔排序(shell)
    快速排序: bubble    quick sort
    选择排序: selection sort, tree selection sort, heap sort
    归并排序: merge sort
    基数排序: radix sort


ISAM: Indexed Sequential Access Method
VSAM: Virtual Storage Access Method
